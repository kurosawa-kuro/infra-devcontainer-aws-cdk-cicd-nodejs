<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>検証用ウェブ アプリ - CRUD/S3/Auth</title>
    <style>
        :root {
            --primary-color: #007bff;
            --border-color: #eee;
            --bg-color: #f5f5f5;
            --text-color: #666;
        }
        
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
        }

        /* 機能一覧 */
        .feature-list {
            list-style: none;
            padding: 0;
            color: var(--text-color);
        }
        .feature-list li::before {
            content: "✓ ";
            color: green;
        }
        .feature-list li.pending::before {
            content: "- ";
            color: var(--text-color);
        }

        /* システム状態 */
        .status-panel {
            background-color: var(--bg-color);
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
        }
        .status-panel button {
            padding: 5px 10px;
            margin-right: 10px;
        }
        .status-check {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }

        /* 投稿フォーム */
        .post-form {
            background-color: var(--bg-color);
            padding: 20px;
            border-radius: 5px;
            margin: 20px 0;
        }
        .post-form input[type="text"] {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
            border: 1px solid var(--border-color);
            border-radius: 3px;
        }
        .post-form input[type="file"] {
            margin: 10px 0;
        }
        .post-form button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 3px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .post-form button:hover {
            background-color: #0056b3;
        }
        .image-preview {
            max-width: 200px;
            max-height: 200px;
            margin: 10px 0;
            display: none;
            border-radius: 5px;
            border: 1px solid var(--border-color);
        }

        /* 投稿一覧 */
        .posts {
            list-style: none;
            padding: 0;
        }
        .post-item {
            background-color: var(--bg-color);
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 15px;
        }
        .post-title {
            font-size: 1.1em;
            margin-bottom: 5px;
            color: #333;
        }
        .post-image-container {
            margin: 10px 0;
            text-align: center;
            background-color: white;
            padding: 10px;
            border-radius: 5px;
            border: 1px solid var(--border-color);
        }
        .post-image {
            max-width: 100%;
            max-height: 400px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .post-date {
            color: var(--text-color);
            font-size: 0.9em;
            margin-top: 8px;
        }
    </style>
</head>
<body>
    <h1>検証用ウェブ アプリ to staging</h1>
    
    <ul class="feature-list">
        <li>データベース接続確認</li>
        <li>CRUD操作の実装</li>
        <li>AWS S3への画像アップロード</li>
        <li>PostgreSQLとPrisma</li>
        <li class="pending">認証・認可 (実装予定)</li>
    </ul>
    
    <div class="status-panel">
        <h3>システム状態</h3>
        <div class="status-check">
            <button onclick="checkHealth()">ヘルスチェック実行</button>
            <span id="last-check"></span>
        </div>
        <p>API状態: <span id="api-health">未確認</span></p>
        <p>データベース状態: <span id="db-health">未確認</span></p>
    </div>

    <div class="post-form">
        <h3>投稿フォーム</h3>
        <form action="/microposts" method="POST" enctype="multipart/form-data">
            <div>
                <input type="text" name="title" placeholder="投稿内容を入力" required>
            </div>
            <div>
                <input type="file" name="image" accept="image/*" onchange="previewImage(this)">
                <img id="preview" class="image-preview">
            </div>
            <button type="submit">投稿</button>
        </form>
    </div>

    <h3>投稿一覧</h3>
    <ul class="posts">
        <% microposts.forEach(post => { %>
            <li class="post-item">
                <div class="post-title"><%= post.title %></div>
                <% if (post.imageUrl) { %>
                    <div class="post-image-container">
                        <img src="<%= post.imageUrl %>" 
                             alt="投稿画像" 
                             class="post-image"
                             loading="lazy">
                    </div>
                <% } %>
                <div class="post-date">
                    <%= new Date(post.createdAt).toLocaleString('ja-JP') %>
                </div>
            </li>
        <% }); %>
    </ul>

    <script>
        // 画像プレビュー
        function previewImage(input) {
            const preview = document.getElementById('preview');
            if (input.files?.[0]) {
                const reader = new FileReader();
                reader.onload = e => {
                    preview.style.display = 'block';
                    preview.src = e.target.result;
                };
                reader.readAsDataURL(input.files[0]);
            } else {
                preview.style.display = 'none';
                preview.src = '';
            }
        }

        // ヘルスチェック
        async function checkHealth() {
            const button = document.querySelector('.status-check button');
            button.disabled = true;
            
            try {
                const [apiRes, dbRes] = await Promise.all([
                    fetch('/health'),
                    fetch('/health-db')
                ]);

                const [apiData, dbData] = await Promise.all([
                    apiRes.json(),
                    dbRes.json()
                ]);

                updateStatus('api-health', apiData.status === 'healthy');
                updateStatus('db-health', dbData.status === 'healthy');
                
                document.getElementById('last-check').textContent = 
                    `最終確認: ${new Date().toLocaleString('ja-JP')}`;

            } catch (error) {
                console.error('ヘルスチェックエラー:', error);
                updateStatus('api-health', false);
                updateStatus('db-health', false);
            } finally {
                button.disabled = false;
            }
        }

        function updateStatus(elementId, isHealthy) {
            const element = document.getElementById(elementId);
            element.textContent = isHealthy ? '正常' : '異��';
            element.style.color = isHealthy ? 'green' : 'red';
        }
    </script>
</body>
</html> 