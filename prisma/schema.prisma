// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//==================================
// User Management Models
//==================================

model User {
  // Core fields
  id         Int         @id @default(autoincrement())
  email      String      @unique
  password   String
  name       String

  // Timestamps
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  profile    UserProfile?
  userRoles  UserRole[]
  microposts Micropost[]
  comments   Comment[]
  likes      Like[]
  
  // Social relations
  following  Follow[]    @relation("Following")
  followers  Follow[]    @relation("Followers")

  // Notification relations
  receivedNotifications Notification[] @relation("ReceivedNotifications")
  sentNotifications     Notification[] @relation("SentNotifications")
}

model UserProfile {
  // Core fields
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  avatarPath  String    @default("/uploads/default_avatar.png")
  
  // Optional profile fields
  bio         String?
  location    String?
  website     String?
  birthDate   DateTime?

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id])
}

model UserRole {
  // Core fields
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  // Constraints and indexes
  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model Role {
  // Core fields
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?

  // Timestamps
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  userRoles   UserRole[]
}

//==================================
// Content Management Models
//==================================

model Micropost {
  // Core fields
  id        Int      @id @default(autoincrement())
  title     String
  userId    Int
  viewCount Int      @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories CategoryMicropost[]
  likes     Like[]
  comments  Comment[]
  views     MicropostView[]
  notifications Notification[]

  // Indexes
  @@index([userId])
  @@index([createdAt])
}

model Category {
  // Core fields
  id         Int                 @id @default(autoincrement())
  name       String              @unique

  // Relations
  microposts CategoryMicropost[]
}

model CategoryMicropost {
  // Core fields
  id           Int       @id @default(autoincrement())
  micropostId  Int
  categoryId   Int

  // Relations
  micropost    Micropost @relation(fields: [micropostId], references: [id], onDelete: Cascade)
  category     Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Constraints and indexes
  @@unique([micropostId, categoryId])
  @@index([micropostId])
  @@index([categoryId])
}

//==================================
// Engagement Models
//==================================

model Like {
  // Core fields
  id         Int       @id @default(autoincrement())
  userId     Int
  micropostId Int

  // Timestamp
  createdAt  DateTime  @default(now())

  // Relations
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  micropost  Micropost @relation(fields: [micropostId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([userId, micropostId])
}

model Comment {
  // Core fields
  id         Int       @id @default(autoincrement())
  content    String
  userId     Int
  micropostId Int
  

  // Timestamps
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  micropost  Micropost @relation(fields: [micropostId], references: [id], onDelete: Cascade)
  notifications Notification[]

  // Indexes
  @@index([userId])
  @@index([micropostId])
}

model MicropostView {
  // Core fields
  id          Int      @id @default(autoincrement())
  micropostId Int
  ipAddress   String
  createdAt   DateTime @default(now())

  // Relations
  micropost   Micropost @relation(fields: [micropostId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([micropostId])
  @@index([ipAddress])
  @@index([createdAt])
}

//==================================
// Social Interaction Models
//==================================

model Follow {
  // Core fields
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int

  // Timestamp
  createdAt   DateTime @default(now())

  // Relations
  follower    User     @relation("Following", fields: [followerId], references: [id])
  following   User     @relation("Followers", fields: [followingId], references: [id])

  // Constraints and indexes
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

//==================================
// Notification Models
//==================================

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}

model Notification {
  // Core fields
  id              Int              @id @default(autoincrement())
  type            NotificationType
  recipientId     Int             
  actorId         Int             
  read            Boolean          @default(false)
  
  // Optional reference fields
  micropostId     Int?            
  commentId       Int?            
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  recipient       User            @relation("ReceivedNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
  actor           User            @relation("SentNotifications", fields: [actorId], references: [id], onDelete: Cascade)
  micropost       Micropost?      @relation(fields: [micropostId], references: [id], onDelete: Cascade)
  comment         Comment?        @relation(fields: [commentId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([recipientId])
  @@index([actorId])
  @@index([micropostId])
  @@index([commentId])
  @@index([type])
  @@index([read])
}
